{"version":3,"sources":["components/NavBar.js","components/Header.js","components/Cards.js","components/Wrapper.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","state","id","class","this","props","topScore","score","Component","Header","Cards","MouseEnter","e","target","style","transform","MouseLeave","onClick","cardSelectHandle","cards","onMouseEnter","onMouseLeave","className","backgroundImage","image","Wrapper","picked","card","newCard","index","indexOf","newRecord","newCard2","map","c","setState","newScore","sort","Math","random","key","onMouseHandle","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bfc63085.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass NavBar extends Component {\n  state = {  }\n  render() { \n    return ( \n      <nav id=\"navbar\" class=\"navbar navbar-light sticky-top \">\n           <h4>Clicky </h4> <h4>Click an image to begin!</h4>  <h4>Top Score: {this.props.topScore} | Score: {this.props.score} </h4>\n      </nav>\n  \n        \n     \n          \n    \n\n\n\n   \n     );\n  }\n}\n \nexport default NavBar;","import React from 'react';\n\nconst Header = () =>{\n  return (\n    \n  <div id=\"header\" class=\"jumbotron jumbotron-fluid text-center\">\n      <div class=\"container\">\n        <h1 class=\"display-4\">Clicky Game</h1>\n        <p class=\"lead\">Click on an image to earn points, but don't click on any more than once!</p>\n      </div>\n  </div>\n  )\n}\n\nexport default Header;","import React, { Component } from 'react';\nimport '../App.css'\nclass Cards extends Component {\n    \n  MouseEnter = (e)=>{\n     e.target.style.transform = `scale(${1.2})`;\n  }\n  MouseLeave = (e)=>{\n    e.target.style.transform = `scale(${1})`;\n  }\n\n  render() { \n         \n    return (\n      // backgroundImage:`url(${this.props.image})`    width: 3+\"rem\",\n       <div onClick={()=> this.props.cardSelectHandle(this.props.cards)} onMouseEnter={this.MouseEnter} onMouseLeave={this.MouseLeave}  className=\"card-item\" style={{ backgroundImage:`url(${this.props.image})`} } >\n      \n      </div>\n      );\n  }\n}\n \nexport default Cards;\n","import React, { Component } from 'react';\nimport NavBar from './NavBar';\nimport Header from './Header';\nimport Cards from './Cards';\n\nclass Wrapper extends Component {\n  \n  state = {  \n    cards:[\n    {\n      id:1,\n      picked:false,\n      image: '/images/bone-removebg-preview.png'\n    },\n    {\n      id:2,\n      picked:false,\n      image: '/images/everest-removebg-preview.png'\n    },\n    {\n      id:3,\n      picked:false,\n      image: '/images/man-removebg-preview.png'\n    },\n    {\n      id:4,\n      picked:false,\n      image: '/images/alex-removebg-preview.png'\n    },\n    {\n      id:5,\n      picked:false,\n      image: '/images/apollo.png'\n    },\n    {\n      id:6,\n      picked:false,\n      image: '/images/carlos.png'\n    },\n    {\n      id:7,\n      picked:false,\n      image: '/images/Chase-removebg-preview.png'\n    },\n    {\n      id:8,\n      picked:false,\n      image: '/images/rocky-removebg-preview.png'\n    },\n    {\n      id:9,\n      picked:false,\n      image: '/images/jake.png'\n    },\n    {\n      id:10,\n      picked:false,\n      image: '/images/mayor.png'\n    },\n    {\n      id:11,\n      picked:false,\n      image: '/images/pink-removebg-preview.png'\n    },\n    {\n      id:12,\n      picked:false,\n      image: '/images/robo.jpg'\n    },\n\n  ],\n  score: 0 ,\n  topScore: 0 ,\n  \n  }\n\n  cardSelectHandle =(card)=>{\n    const newCard = [...this.state.cards];\n    const index = newCard.indexOf(card);\n    // if(this.state.score >= this.state.topScore  ){\n    //   var newTopScore = this.state.topScore +1;\n    //   if(newTopScore === (this.state.cards.length + 1)){\n    //     newTopScore--;\n    //   }\n    //   this.setState({topScore:newTopScore})\n    // }\n\n    if(newCard[index].picked === true ){\n        const newCard2= [...this.state.cards];\n        newCard2.map(c=> c.picked =false );\n        if(this.state.score > this.state.topScore){\n            var newRecord;\n            newRecord = this.state.score;\n        }else{\n            newRecord = this.state.topScore\n        }\n\n        this.setState({score: 0, cards:newCard2, topScore: newRecord});\n\n    }else{\n       newCard[index].picked = true;\n       const newScore = this.state.score +1;\n       newCard.sort(()=> Math.random()-0.5); \n       this.setState({cards: newCard, score:newScore,}); \n    }\n  }\n\n \n\n\n  render() { \n    return ( \n        <div>\n            <NavBar score={this.state.score} topScore={this.state.topScore} />\n            <Header />\n          <div className=\"container card-holder\">\n            <div className=\"card-div\">\n             \n               {this.state.cards.map(c => \n              \n              <Cards \n                key= {c.id}\n                picked = {c.picked}\n                id={c.id}\n                image ={c.image}\n                cardSelectHandle = {this.cardSelectHandle}\n                onMouseHandle = {this.onMouseHandle}\n                cards={c}\n              />\n              ) }\n\n     \n             </div>\n            </div>\n\n\n\n             \n\n             \n        </div>\n     );\n  }\n}\n \nexport default Wrapper;","import React from 'react';\nimport './App.css';\nimport Wrapper from './components/Wrapper';\n\nfunction App() {\n  return <Wrapper />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}