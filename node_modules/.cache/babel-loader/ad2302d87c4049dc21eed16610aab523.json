{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Desktop/Homework/Clicky-Memory-Game/src/components/Wrapper.js\";\nimport React, { Component } from 'react';\nimport NavBar from './NavBar';\nimport Header from './Header';\nimport Cards from './Cards';\n\nclass Wrapper extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      cards: [{\n        id: 1,\n        picked: false,\n        image: '/images/bone-removebg-preview.png'\n      }, {\n        id: 2,\n        picked: false,\n        image: '/images/everest-removebg-preview.png'\n      }, {\n        id: 3,\n        picked: false,\n        image: '/images/man-removebg-preview.png'\n      }, {\n        id: 4,\n        picked: false,\n        image: '/images/alex-removebg-preview.png'\n      }, {\n        id: 5,\n        picked: false,\n        image: '/images/apollo.png'\n      }, {\n        id: 6,\n        picked: false,\n        image: '/images/carlos.png'\n      }, {\n        id: 7,\n        picked: false,\n        image: '/images/Chase-removebg-preview.png'\n      }, {\n        id: 8,\n        picked: false,\n        image: '/images/rocky-removebg-preview.png'\n      }, {\n        id: 9,\n        picked: false,\n        image: '/images/jake.png'\n      }, {\n        id: 10,\n        picked: false,\n        image: '/images/mayor.png'\n      }, {\n        id: 11,\n        picked: false,\n        image: '/images/pink-removebg-preview.png'\n      }, {\n        id: 12,\n        picked: false,\n        image: '/images/robo.jpg'\n      }],\n      score: 0,\n      topScore: 0\n    };\n\n    this.cardSelectHandle = card => {\n      const newCard = [...this.state.cards];\n      const index = newCard.indexOf(card); // if(this.state.score >= this.state.topScore  ){\n      //   var newTopScore = this.state.topScore +1;\n      //   if(newTopScore === (this.state.cards.length + 1)){\n      //     newTopScore--;\n      //   }\n      //   this.setState({topScore:newTopScore})\n      // }\n\n      if (newCard[index].picked === true) {\n        const newCard2 = [...this.state.cards];\n        newCard2.map(c => c.picked = false);\n\n        if (this.state.score > this.state.topScore) {\n          var newRecord;\n          newRecord = this.state.score;\n        } else {\n          newRecord = this.state.topScore;\n        }\n\n        this.setState({\n          score: 0,\n          cards: newCard2,\n          topScore: newRecord\n        });\n      } else {\n        newCard[index].picked = true;\n        const newScore = this.state.score + 1;\n        newCard.sort(() => Math.random() - 0.5);\n        this.setState({\n          cards: newCard,\n          score: newScore\n        });\n      }\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, React.createElement(NavBar, {\n      score: this.state.score,\n      topScore: this.state.topScore,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }), React.createElement(Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"container card-holder\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"card-div\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, this.state.cards.map(c => React.createElement(Cards, {\n      key: c.id,\n      picked: c.picked,\n      id: c.id,\n      image: c.image,\n      cardSelectHandle: this.cardSelectHandle,\n      onMouseHandle: this.onMouseHandle,\n      cards: c,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nexport default Wrapper;","map":{"version":3,"sources":["/Users/admin/Desktop/Homework/Clicky-Memory-Game/src/components/Wrapper.js"],"names":["React","Component","NavBar","Header","Cards","Wrapper","state","cards","id","picked","image","score","topScore","cardSelectHandle","card","newCard","index","indexOf","newCard2","map","c","newRecord","setState","newScore","sort","Math","random","render","onMouseHandle"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport NavBar from './NavBar';\nimport Header from './Header';\nimport Cards from './Cards';\n\nclass Wrapper extends Component {\n  \n  state = {  \n    cards:[\n    {\n      id:1,\n      picked:false,\n      image: '/images/bone-removebg-preview.png'\n    },\n    {\n      id:2,\n      picked:false,\n      image: '/images/everest-removebg-preview.png'\n    },\n    {\n      id:3,\n      picked:false,\n      image: '/images/man-removebg-preview.png'\n    },\n    {\n      id:4,\n      picked:false,\n      image: '/images/alex-removebg-preview.png'\n    },\n    {\n      id:5,\n      picked:false,\n      image: '/images/apollo.png'\n    },\n    {\n      id:6,\n      picked:false,\n      image: '/images/carlos.png'\n    },\n    {\n      id:7,\n      picked:false,\n      image: '/images/Chase-removebg-preview.png'\n    },\n    {\n      id:8,\n      picked:false,\n      image: '/images/rocky-removebg-preview.png'\n    },\n    {\n      id:9,\n      picked:false,\n      image: '/images/jake.png'\n    },\n    {\n      id:10,\n      picked:false,\n      image: '/images/mayor.png'\n    },\n    {\n      id:11,\n      picked:false,\n      image: '/images/pink-removebg-preview.png'\n    },\n    {\n      id:12,\n      picked:false,\n      image: '/images/robo.jpg'\n    },\n\n  ],\n  score: 0 ,\n  topScore: 0 ,\n  \n  }\n\n  cardSelectHandle =(card)=>{\n    const newCard = [...this.state.cards];\n    const index = newCard.indexOf(card);\n    // if(this.state.score >= this.state.topScore  ){\n    //   var newTopScore = this.state.topScore +1;\n    //   if(newTopScore === (this.state.cards.length + 1)){\n    //     newTopScore--;\n    //   }\n    //   this.setState({topScore:newTopScore})\n    // }\n\n    if(newCard[index].picked === true ){\n        const newCard2= [...this.state.cards];\n        newCard2.map(c=> c.picked =false );\n        if(this.state.score > this.state.topScore){\n            var newRecord;\n            newRecord = this.state.score;\n        }else{\n            newRecord = this.state.topScore\n        }\n\n        this.setState({score: 0, cards:newCard2, topScore: newRecord});\n\n    }else{\n       newCard[index].picked = true;\n       const newScore = this.state.score +1;\n       newCard.sort(()=> Math.random()-0.5); \n       this.setState({cards: newCard, score:newScore,}); \n    }\n  }\n\n \n\n\n  render() { \n    return ( \n        <div>\n            <NavBar score={this.state.score} topScore={this.state.topScore} />\n            <Header />\n          <div className=\"container card-holder\">\n            <div className=\"card-div\">\n             \n               {this.state.cards.map(c => \n              \n              <Cards \n                key= {c.id}\n                picked = {c.picked}\n                id={c.id}\n                image ={c.image}\n                cardSelectHandle = {this.cardSelectHandle}\n                onMouseHandle = {this.onMouseHandle}\n                cards={c}\n              />\n              ) }\n\n     \n             </div>\n            </div>\n\n\n\n             \n\n             \n        </div>\n     );\n  }\n}\n \nexport default Wrapper;"]},"metadata":{},"sourceType":"module"}